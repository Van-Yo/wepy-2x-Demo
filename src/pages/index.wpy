<style lang="less">
	text{
		display: block;
		font-size: 36rpx;
	}
	.title{
		font-size: 40rpx;
		color: red;
	}
	input {
		border: 1rpx solid #ccc;
		display: inline-block;
		width: 200rpx;
		border-radius: 5rpx;
	}
	.info {
		padding-right: 10rpx;
	}
	.userinfo {
		display: flex;
		flex-direction: column;
		align-items: center;
	}

	.userinfo-avatar {
		width: 80rpx;
		height: 80rpx;
		border-radius: 50%;
	}

	.userinfo-nickname {
		color: #aaa;
	}
	.slide {
		width: 640rpx;
		display: flex;
		border: 1rpx solid #ccc;
		font-size: 28rpx;
		align-items: center;
		box-sizing: border-box;
		.left {
			width: 750rpx;
			padding: 20rpx;
		}
		.right {
			display: flex;
			.right-item {
				padding: 20rpx 30rpx;
				background-color: red;
				color: #fff;
			}
		}
	}
</style>

<wxs module="m1" lang="babel">
const getTime = (time) => {
  let date = getDate(time);
  let hour = date.getHours();
  let mins = date.getMinutes();
  let sec = date.getSeconds();
  let milli = date.getMilliseconds();
  return `${hour}:${mins}:${sec}.${milli}`;
}
module.exports.getTime = getTime;
</wxs>

<template>
  <div class="container">
	<div class="userinfo">
		<image class="userinfo-avatar" src="{{ userInfo.avatarUrl }}" background-size="cover"/>
		<div class="userinfo-nickname" >{{ userInfo.nickName }}</div>
		<button v-if="userInfo.nickName=='您还未登录'" type="mini" open-type="getUserInfo" lang="zh_CN" bindgetuserinfo="getMyinfo">请登录</button>
	</div>

	<panel>
		<div class="title" slot="title" @tap="justClg">测试数据绑定</div>
			<!-- 使用wxs中的方法 -->
		<text class="info" @tap="currentTime = +new Date()">{{m1.getTime(currentTime)}}</text>
		<text class="info">{{setTimeoutTitle}}</text>
		<!-- 优先执行mixin里面的方法 -->
		<text class="info" @tap="mixintap">{{mixin}}</text>
		<!-- 计算属性 -->
		<text class="info">{{testcomputed}}</text>
		<!-- vuex 中的state -->
		<text class="info">{{counter}}</text>
	</panel>

	<panel>
		<div class="title" slot="title">其它测试</div>
		<!--button @tap="toast" size="mini">第三方组件</button-->
		<!-- 宏观地去修改组件中的值 -->
		<button @tap="communicate" size="mini">组件通信</button>
	</panel>

	<panel>
		<div class="title" slot="title">测试并发网络请求</div>
		<div>返回结果: <text>{{netrst}}</text></div>
		<button @tap="request" size="mini"> 点我发起1个请求 </button>
	</panel>

	<!-- 测试 v-model,与vue的v-model一样 -->
	<panel>
		<div class="title" slot="title">测试 v-model</div>
		<div style="display: flex; align-items: center;">
			<input v-model="inputmodel" />
			<text style="margin-left: 30rpx;">Value: {{inputmodel}}</text>
		</div>
	</panel>

	<panel>
	  <div class="title" slot="title">测试组件</div>

	  <text class="testcounter">全局计数器：</text>
	  <div class="counterview">
		<button @tap="mynum++" size="mini">全局计数器: {{mynum}}</button>
	  </div>

	  <text class="testcounter">计数组件1 - num: </text>
	  <!-- <div class="counterview">

		<counter @index-emit.user="counterEmit" />
	  </div> -->

	  <text class="testcounter">计数组件2 - num.sync: </text>

	  <!-- <div class="counterview">
		<counter :num.sync="mynum"></counter>
	  </div> -->
	</panel>
	<!-- 父组件向子组件传值,下面是嵌套传值（爷->父->子） -->
	<panel>
		<div class="title" slot="title">测试组件Repeat</div>
		<div v-for="(item, index) in groupList" :key="index">
			<group :grouplist="item" :index="index"></group>
		</div>
	</panel>
	<!-- 在package.json中奖list的依赖换了 -->
	<panel>
	  <div class="title" slot="title">测试列表</div>
	  <list></list>
	</panel>

	<panel>
		<div class="title" slot="title">测试引用第三方原生组件-vant-weapp</div>
		<van-search value="{{ value }}" placeholder="请输入搜索关键词" />
	</panel>
	<!--toast /-->
  </div>
</template>

<script>
import wepy from '@wepy/core'
import eventHub from '../common/eventHub';
import { mapState } from '@wepy/x';
import store from '../store';
import testMixin from '../mixins/test';
import HomeRequest from '../request/homeRequest';
wepy.page({
	store,
	config: {
	  navigationBarTitleText: 'test'
	},

	hooks: {
	  // Page 级别 hook, 只对当前 Page 的 setData 生效。
		'before-setData': function (dirty) {
			if (Math.random() < 0.2) {
			console.log('setData canceled');
			return false; // Cancel setData
			}
			dirty.time = +new Date();
			return dirty;
		},
	  	'before-event': function (data) {
			return data;
		}
	},

 

	mixins: [testMixin],

	data: {
	  inputmodel: 'v-model',
	  mynum: 20,
	  userInfo: {
		nickName: '您还未登录'
	  },
	  currentTime: +new Date(),
	  setTimeoutTitle: '标题三秒后会被修改',
	  count: 0,
	  netrst: '',
	  groupList: [
		{
		  id: 1,
		  name: '点击改变',
		  list: [
			{
			  childid: '1.1',
			  childname: '子项，点我改变'
			}, {
			  childid: '1.2',
			  childname: '子项，点我改变'
			}, {
			  childid: '1.3',
			  childname: '子项，点我改变'
			}
		  ]
		},
		{
		  id: 2,
		  name: '点击改变',
		  list: [
			{
			  childid: '2.1',
			  childname: '子项，点我改变'
			}, {
			  childid: '2.2',
			  childname: '子项，点我改变'
			}, {
			  childid: '2.3',
			  childname: '子项，点我改变'
			}
		  ]
		},
		{
		  id: 3,
		  name: '点击改变',
		  list: [
			{
			  childid: '3.1',
			  childname: '子项，点我改变'
			}
		  ]
		}
	  ]
	},

	computed: {
		...mapState([ 'counter' ]),
		testcomputed () {
			return 'computed - ' + this.mynum;
		}
	},

	methods: {
		justClg(){
			console.log('---------------------');
		},
		getMyinfo(e){
			this.userInfo = e.$wx.detail.userInfo;
		},
		tap () {
			throw 'can not go here';
		},
		plus () {
			this.mynum++
		},
		toast () {
			let promise = this.$invoke('toast', 'show', {
				title: '自定义标题',
				img: 'https://raw.githubusercontent.com/kiinlam/wetoast/master/images/star.png'
			})

			promise.then((d) => {
				console.log('toast done')
			});
		},
		mixintap () {
			console.log('do noting from ' + this.$is);
		},
		communicate () {
				// this.$children获取所有子组件列表
				let counters = this.$children.filter((com) => com.$is === 'components/counter');
				// 父组件可以直接修改子组件中的值
				counters[0].num++;
				// 向全局注册的event传递数据
				eventHub.$emit('app-launch', {a: 1}, {b: 2});
		},
	  	// request请求，经过初步封装
		request () {
			let data = {
				time:1,
				t:'css',
				c:'MQo=',
				i:1
			}
			HomeRequest.testRequestApi(data).then(res => {
				if(res.data){
					this.netrst = res.data;
				}
			})
		},
		counterEmit (num) {
			console.log(`${this.$is} receive event, the number is: ${num}`);
		}
	},

	created () {
		let self = this
		self.setTimeoutTitle = '标题三秒后会被修改';
		setTimeout(() => {
			self.setTimeoutTitle = '到三秒了';
		}, 3000);
	}
});
</script>
<config>
{
	navigationBarTitleText: 'WePY 2.0 Feature Demo',
	usingComponents: {
	  panel: '~@/components/panel',
	  counter: '~counter',
	  list: '../components/list',
	  group: '../components/group',
	  van-search: "../components/vant/search/index"
	}
}
</config>
